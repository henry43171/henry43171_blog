{"categories":[{"link":"/categories/automation/","name":"Automation","slug":"Automation"},{"link":"/categories/data-analyze/","name":"Data Analyze","slug":"Data Analyze"},{"link":"/categories/numpy/","name":"Numpy","slug":"Numpy"}],"pages":[],"posts":[{"link":"/posts/%E6%88%AA%E5%9C%96%E5%B7%A5%E5%85%B7-hotkeytray/","text":"為什麼會有這個工具 在多螢幕環境下工作時，截圖常常是一件麻煩事。\nWindows 內建的截圖工具要不就是需要手動框選範圍，要不就是整個螢幕，\n如果我只想要「左螢幕一鍵截圖」或「右螢幕一鍵截圖」，就顯得很笨重。\n於是我動手寫了一個小工具 —— HotkeyTray。\n它是一個常駐在系統托盤的 Python 程式，只要設定好快捷鍵，就能隨時一鍵截圖並自動儲存。\n工具簡介 名稱：HotkeyTray 功能特色： 系統托盤常駐，不佔畫面 設定快捷鍵截取左螢幕、右螢幕 設定檔可自訂快捷鍵、儲存路徑 適用情境： 遠端開會快速截圖 文件製作 一般多螢幕日常使用 技術堆疊 Python pystray：系統托盤功能 keyboard：快捷鍵偵測 Pillow：影像處理 dotenv + JSON：設定管理 安裝與使用 安裝 可以直接下載 EXE 檔執行 或者用 Python 自行執行： BASH\rCollapse\rCopy\rgit clone https://github.com/henry43171/HotkeyTray.git cd HotkeyTray python src\rClick to expand and view more\r使用步驟 啟動程式後，系統托盤會出現 HotkeyTray 圖示 預設快捷鍵： Alt+1 = 左螢幕截圖 Alt+2 = 右螢幕截圖 截圖會自動存到 screenshots/ 資料夾 開發過程的小插曲 這原本只是個簡單的小工具，但過程中還是踩了不少坑：\n一開始有兩份 load_config，搞到自己亂掉 一度遇到「修改設定後不會馬上套用」的問題 才發現，就算小專案也會遇到維護性挑戰 這些問題讓我開始理解「程式碼乾淨」與「可維護性」的重要性。\n未來計畫 更直覺的設定 UI 支援更多快捷鍵動作（例如複製到剪貼簿、不存檔） 結語 如果你也覺得多螢幕截圖麻煩，或許這個小工具能幫到你。\n程式碼已經放在 GitHub，歡迎下載試試。\nGitHub 連結：https://github.com/henry43171/HotkeyTray\r","title":"截圖工具 HotkeyTray"},{"link":"/posts/%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-malicious-urls/","text":"1. 讀取資料 嘗試使用學到的基本語法來分析.csv檔，先以 malicious urls 惡意網址的資料集來練習，使用 pandas 的 read_csv() 讀取資料，檔案路徑採相對路徑管理：\n資料來源 https://www.kaggle.com/datasets/sid321axn/malicious-urls-dataset\rPYTHON\rCollapse\rCopy\rimport pandas as pd df = pd.read_csv(\u0026#34;./data/malicious_phish.csv\u0026#34;)\rClick to expand and view more\r2. 初步觀察資料內容 為了了解資料基本情況，先用 head() 查看前幾筆資料，並搭配 shape 與 isnull().sum() 檢查欄位結構與缺失值。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;---\u0026#34;*30) print(\u0026#34;First 10 datas\u0026#34;) print(df.head(10)) print(\u0026#34;---\u0026#34;*30) print(\u0026#34;Columns\u0026#34;) print(df.columns) print(\u0026#34;---\u0026#34;*30) print(\u0026#34;Shape\u0026#34;) print(df.shape) # 有幾筆資料、幾個欄位 print(\u0026#34;---\u0026#34;*30) print(\u0026#34;Sum of null\u0026#34;) print(df.isnull().sum()) # 各欄位的缺值（NaN）數量\rClick to expand and view more\r3. 統計分析：各類型網址數量分布 資料集中的 type 欄位標示了每筆網址的類別，如 phishing、malware 等。我們可以使用 value_counts() 來計算每種類型的數量與比例。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;---\u0026#34;*30) print(\u0026#34;Type\u0026#34;) print(df[\u0026#34;type\u0026#34;].value_counts()) print(\u0026#34;---\u0026#34;*30) print(\u0026#34;Proportion\u0026#34;) print(df[\u0026#34;type\u0026#34;].value_counts(normalize=True))\rClick to expand and view more\r4. 視覺化結果 將 type 分類以長條圖方式視覺化，可更直觀地觀察分布情況。\nPYTHON\rCollapse\rCopy\rimport matplotlib.pyplot as plt def data_visulize(title, xlabel, ylabel, png_name): # 繪製長條圖 df[\u0026#34;type\u0026#34;].value_counts().plot(kind=\u0026#34;bar\u0026#34;, color=\u0026#39;skyblue\u0026#39;) plt.xticks(rotation=0) # 加標題 plt.title(title) plt.xlabel(xlabel) plt.ylabel(ylabel) # 儲存圖片 plt.tight_layout() plt.savefig(png_name) data_visulize(title = \u0026#34;Count of Each URL Type\u0026#34;, xlabel = \u0026#34;Type\u0026#34;, ylabel = \u0026#34;Count\u0026#34;, png_name = \u0026#34;type_counts.png\u0026#34;)\rClick to expand and view more\r小結 這是一份非常乾淨的資料集，欄位結構單純且無缺失值，很適合初學者練習資料探索與視覺化。 下一步可以考慮從 url 欄位衍生特徵，例如：\n網址長度 是否包含特殊符號或 IP 格式 各類型的網址長度比較 ","title":"資料分析實作練習 - malicious urls"},{"link":"/posts/pandas-%E7%B7%B4%E7%BF%92%E7%B4%80%E9%8C%84/","text":"Pandas 練習 基本語法 基本pandas語法練習，先宣告最基本的資料型態dataframe，這邊有刻意留一個None，方便後面檢查資料用。\nPYTHON\rCollapse\rCopy\rimport pandas as pd data = { \u0026#34;Name\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;], \u0026#34;Class\u0026#34;: [\u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class A\u0026#34;], \u0026#34;Math\u0026#34;: [90, 85, 78], \u0026#34;English\u0026#34;: [88, 92, 80], \u0026#34;Science\u0026#34;: [85, 79, None] }\rClick to expand and view more\r建立 DataFrame 物件並印出全部資料，觀察整體格式與資料型別。\nPYTHON\rCollapse\rCopy\rdf = pd.DataFrame(data) print(\u0026#34;\\nAll data:\\n\u0026#34;, df) \u0026#34;\u0026#34;\u0026#34; All data: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class A 78 80 NaN \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r可以用不同的語法，來取得不同的資料格式，像是 df.shape，可以確認資料表的維度（列數、欄數）。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nData shape:\\n\u0026#34;, df.shape) \u0026#34;\u0026#34;\u0026#34; Data shape: (3, 5) \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r用 df.head() 可顯示前幾筆資料，可指定筆數，預設為5。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nFirst 2 rows:\\n\u0026#34;, df.head(2)) \u0026#34;\u0026#34;\u0026#34; First 2 rows: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r用 df.columns 可查看欄位名稱（column labels）。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nData columns:\\n\u0026#34;, df.columns) \u0026#34;\u0026#34;\u0026#34; Data columns: Index([\u0026#39;Name\u0026#39;, \u0026#39;Class\u0026#39;, \u0026#39;Math\u0026#39;, \u0026#39;English\u0026#39;, \u0026#39;Science\u0026#39;], dtype=\u0026#39;object\u0026#39;) \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r用 df.describe() 可顯示資料的統計摘要（僅限數值欄位）。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nData describe:\\n\u0026#34;, df.describe()) \u0026#34;\u0026#34;\u0026#34; Data describe: Math English Science count 3.000000 3.000000 2.000000 mean 84.333333 86.666667 82.000000 std 6.027714 6.110101 4.242641 min 78.000000 80.000000 79.000000 25% 81.500000 84.000000 80.500000 50% 85.000000 88.000000 82.000000 75% 87.500000 90.000000 83.500000 max 90.000000 92.000000 85.000000 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r用 df.info() 可查看資料總覽（欄位型別、缺值狀況），因為他會直接輸出，就不另外寫print了。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nData information:\u0026#34;) df.info() \u0026#34;\u0026#34;\u0026#34; \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt; RangeIndex: 3 entries, 0 to 2 Data columns (total 5 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Name 3 non-null object 1 Class 3 non-null object 2 Math 3 non-null int64 3 English 3 non-null int64 4 Science 2 non-null float64 dtypes: float64(1), int64(2), object(2) memory usage: 252.0+ bytes \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r欄位操作 先宣告基本資料。\nPYTHON\rCollapse\rCopy\rimport pandas as pd data_expand = { \u0026#34;Name\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;Diana\u0026#34;, \u0026#34;Ethan\u0026#34;], \u0026#34;Class\u0026#34;: [\u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;], \u0026#34;Math\u0026#34;: [90, 85, 78, 92, 88], \u0026#34;English\u0026#34;: [88, 92, 80, 85, 90], \u0026#34;Science\u0026#34;: [85, 79, None, 90, 84] } df = pd.DataFrame(data_expand) print(\u0026#34;\\n\u0026#34; + \u0026#34;--\u0026#34;*20 + \u0026#34;印出全資料\u0026#34; + \u0026#34;--\u0026#34;*20) print(\u0026#34;\\nAll expand data:\\n\u0026#34;, df) \u0026#34;\u0026#34;\u0026#34; All expand data: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 79 77 82.0 6 George Class A 84 83 NaN 7 Hannah Class B 91 86 80.0 8 Ian Class C 76 81 78.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r選取欄位和重新命名 可選取多組欄位。\nPYTHON\rCollapse\rCopy\r# 選取欄位與重新命名 print(\u0026#34;\\n選取欄位\u0026#34;) print(df[[\u0026#34;Math\u0026#34;, \u0026#34;Science\u0026#34;]]) \u0026#34;\u0026#34;\u0026#34; Math Science 0 90 85.0 1 85 79.0 2 78 NaN 3 92 90.0 4 88 84.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r可將欄位重新命名。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\n重新命名\u0026#34;) print(df.rename(columns={\u0026#34;Math\u0026#34;: \u0026#34;Mathematics\u0026#34;})) \u0026#34;\u0026#34;\u0026#34; Name Class Mathematics English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r新增欄位與計算 新增欄位，可計算欄位結果。\n基本加總 有時候我們需要根據多個欄位的數值，算出總和或平均，這時就可以「開一條新欄」來放計算結果。\n這種寫法是最直接的「欄與欄相加」，如果所有欄位都有值，沒問題；但一旦遇到 NaN（缺失值），結果就會整組報 NaN，像 Charlie 就「一分都拿不到」，因為他缺考了一科。\nPYTHON\rCollapse\rCopy\r# 新增欄位與計算欄位 print(\u0026#34;\\n新增欄位與計算欄位\u0026#34;) # 建立加總欄： df[\u0026#34;Total\u0026#34;] = df[\u0026#34;Math\u0026#34;] + df[\u0026#34;English\u0026#34;] + df[\u0026#34;Science\u0026#34;] print(df) \u0026#34;\u0026#34;\u0026#34; 新增欄位與計算欄位 Name Class Math English Science Total 0 Alice Class A 90 88 85.0 263.0 1 Bob Class B 85 92 79.0 256.0 2 Charlie Class C 78 80 NaN NaN 3 Diana Class A 92 85 90.0 267.0 4 Ethan Class B 88 90 84.0 262.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r寬容加總 這種寫法比較人性化，它會自動忽略 NaN 的欄位，只對有數值的欄位做加總。就像 Charlie 缺考一科，還是能加總剩下的兩科。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\n新增欄位與計算欄位_2\u0026#34;) score_columns = [\u0026#34;Math\u0026#34;, \u0026#34;English\u0026#34;, \u0026#34;Science\u0026#34;] df[\u0026#34;Total_2\u0026#34;] = df[score_columns].sum(axis=1) print(df) \u0026#34;\u0026#34;\u0026#34; 新增欄位與計算欄位_2 Name Class Math English Science Total Total_2 0 Alice Class A 90 88 85.0 263.0 263.0 1 Bob Class B 85 92 79.0 256.0 256.0 2 Charlie Class C 78 80 NaN NaN 158.0 3 Diana Class A 92 85 90.0 267.0 267.0 4 Ethan Class B 88 90 84.0 262.0 262.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r嚴格加總 加入 min_count 機制。 如果要實現「只要缺一科就不算總分」的資料。min_count 可以設定至少幾個值要存在，才會進行加總；不滿足就直接給你 NaN。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\n新增欄位與計算欄位_3\u0026#34;) df[\u0026#34;Total_strict\u0026#34;] = df[score_columns].sum(axis=1, min_count=len(score_columns)) print(df) \u0026#34;\u0026#34;\u0026#34; 新增欄位與計算欄位_3 Name Class Math English Science Total Total_2 Total_strict 0 Alice Class A 90 88 85.0 263.0 263.0 263.0 1 Bob Class B 85 92 79.0 256.0 256.0 256.0 2 Charlie Class C 78 80 NaN NaN 158.0 NaN 3 Diana Class A 92 85 90.0 267.0 267.0 267.0 4 Ethan Class B 88 90 84.0 262.0 262.0 262.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r建立平均 透過 .mean(axis=1) 可以針對每一列（row）計算多個欄位的平均值。這在需要針對多個特徵做統計時非常常見，不論是處理測試成績、銷售數據，還是感測器資料，都能派上用場。\n第一種直接指定欄位名稱 第二種使用先前定義的欄位列表 score_columns，讓程式碼更有彈性與可維護性。 PYTHON\rCollapse\rCopy\r# 建立平均欄： print(\u0026#34;\\n平均欄位\u0026#34;) df[\u0026#34;Average\u0026#34;] = df[[\u0026#34;Math\u0026#34;, \u0026#34;English\u0026#34;, \u0026#34;Science\u0026#34;]].mean(axis=1) df[\u0026#34;Average_2\u0026#34;] = df[score_columns].mean(axis=1) print(df) \u0026#34;\u0026#34;\u0026#34; 平均欄位 Name Class Math English Science Total Total_2 Total_strict Average Average_2 0 Alice Class A 90 88 85.0 263.0 263.0 263.0 87.666667 87.666667 1 Bob Class B 85 92 79.0 256.0 256.0 256.0 85.333333 85.333333 2 Charlie Class C 78 80 NaN NaN 158.0 NaN 79.000000 79.000000 3 Diana Class A 92 85 90.0 267.0 267.0 267.0 89.000000 89.000000 4 Ethan Class B 88 90 84.0 262.0 262.0 262.0 87.333333 87.333333 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r刪除欄位 資料整理過程中，常會出現一些「中途產物」——像是用來驗證語法的欄位、測試不同參數的欄位等。當這些欄位不再需要時，就可以使用 drop() 來清理。\nPYTHON\rCollapse\rCopy\r# 刪除欄位 print(\u0026#34;\\n刪除欄位\u0026#34;) df = df.drop(columns=[\u0026#34;Total_2\u0026#34;, \u0026#34;Total_strict\u0026#34;, \u0026#34;Average_2\u0026#34;]) print(df) \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science Total Average 0 Alice Class A 90 88 85.0 263.0 87.666667 1 Bob Class B 85 92 79.0 256.0 85.333333 2 Charlie Class C 78 80 NaN NaN 79.000000 3 Diana Class A 92 85 90.0 267.0 89.000000 4 Ethan Class B 88 90 84.0 262.0 87.333333 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r條件篩選與邏輯運算 當我們想根據特定條件過濾資料時，可以使用布林運算符（例如 \u0026amp;, |, ~）來進行條件組合。 例如下面這段程式碼就是篩選出「Math \u0026gt; 80 且 English \u0026gt; 85」的資料列：\nPYTHON\rCollapse\rCopy\r# 條件篩選與邏輯運算 print(\u0026#34;\\n條件篩選與邏輯運算\u0026#34;) print(df[(df[\u0026#34;Math\u0026#34;] \u0026gt; 80) \u0026amp; (df[\u0026#34;English\u0026#34;] \u0026gt; 85)]) \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science Total Average 0 Alice Class A 90 88 85.0 263.0 87.666667 1 Bob Class B 85 92 79.0 256.0 85.333333 4 Ethan Class B 88 90 84.0 262.0 87.333333 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r排序與重排 sort_values() 可以讓你依照指定欄位進行排序，ascending=False 則是設定為降冪排列。\nPYTHON\rCollapse\rCopy\r# 排序與重排 print(\u0026#34;\\n排序與重排 \u0026#39;df.sort_values(by=\u0026#39;Math\u0026#39;, ascending=False)\u0026#39;\u0026#34;) df = df.sort_values(by=\u0026#34;Math\u0026#34;, ascending=False) print(df) \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science Total Average 3 Diana Class A 92 85 90.0 267.0 89.000000 0 Alice Class A 90 88 85.0 263.0 87.666667 4 Ethan Class B 88 90 84.0 262.0 87.333333 1 Bob Class B 85 92 79.0 256.0 85.333333 2 Charlie Class C 78 80 NaN NaN 79.000000 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r排序後，原本的索引（index）會跟著資料順序跑掉，如果不重新編排的話，可能會造成後續處理混亂。這時就可以使用 df.reset_index(drop=True) 重新設定索引，這樣會重新設定索引，並移除原本的索引欄位，讓表格更乾淨整齊。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\n排序與重排 \u0026#39;df.reset_index(drop=True)\u0026#39;\u0026#34;) df = df.reset_index(drop=True) print(df) \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science Total Average 0 Diana Class A 92 85 90.0 267.0 89.000000 1 Alice Class A 90 88 85.0 263.0 87.666667 2 Ethan Class B 88 90 84.0 262.0 87.333333 3 Bob Class B 85 92 79.0 256.0 85.333333 4 Charlie Class C 78 80 NaN NaN 79.000000 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r資料篩選 Pandas 支援類似 Excel 的邏輯條件過濾功能，可以透過布林索引（Boolean Indexing）快速找到符合條件的資料。\n為了更好的展示資料篩選的效果，我先把資料調整一下。\nPYTHON\rCollapse\rCopy\rdata_expand = { \u0026#34;Name\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;Diana\u0026#34;, \u0026#34;Ethan\u0026#34;, \u0026#34;Fiona\u0026#34;, \u0026#34;George\u0026#34;, \u0026#34;Hannah\u0026#34;, \u0026#34;Ian\u0026#34;, \u0026#34;Julia\u0026#34;], \u0026#34;Class\u0026#34;: [\u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;], \u0026#34;Math\u0026#34;: [90, 85, 78, 92, 88, 79, 84, 91, 76, 89], \u0026#34;English\u0026#34;: [88, 92, 80, 85, 90, 77, 83, 86, 81, 87], \u0026#34;Science\u0026#34;: [85, 79, None, 90, 84, 82, None, 80, 78, 89] } df_e = pd.DataFrame(data_expand) print(\u0026#34;\\nAll expand data:\\n\u0026#34;, df_e) \u0026#34;\u0026#34;\u0026#34; All expand data: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 79 77 82.0 6 George Class A 84 83 NaN 7 Hannah Class B 91 86 80.0 8 Ian Class C 76 81 78.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r先來看看一個簡單的條件式，會回傳一個布林值的 Series，這個結果代表只有第三筆資料（索引值為 2）符合條件，英文成績小於等於 85。\nPYTHON\rCollapse\rCopy\rprint(df[\u0026#34;English\u0026#34;] \u0026lt;= 85) \u0026#34;\u0026#34;\u0026#34; 0 False 1 False 2 True 3 True 4 False 5 True 6 True 7 False 8 True 9 False Name: English, dtype: bool \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r篩選英文成績小於等於 85 的學生 可以將這個布林條件直接套用在 DataFrame 上，過濾出符合的列：\nPYTHON\rCollapse\rCopy\r# 篩選英文成績小於等於 85 的學生 print(\u0026#34;\\nEnglish \u0026lt;= 85:\\n\u0026#34;, df[df[\u0026#34;English\u0026#34;] \u0026lt;= 85]) \u0026#34;\u0026#34;\u0026#34; English \u0026lt;= 85: Name Class Math English Science 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 5 Fiona Class C 79 77 82.0 6 George Class A 84 83 NaN 8 Ian Class C 76 81 78.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r篩選班級為 Class A 的學生 同理，也可以用文字欄位做條件篩選，像是找出「Class A」的學生：\nPYTHON\rCollapse\rCopy\r# 篩選班級為 Class A 的學生 print(\u0026#34;\\nClass A only:\\n\u0026#34;, df[df[\u0026#34;Class\u0026#34;] == \u0026#34;Class A\u0026#34;]) \u0026#34;\u0026#34;\u0026#34; Class A only: Name Class Math English Science 0 Alice Class A 90 88 85.0 3 Diana Class A 92 85 90.0 6 George Class A 84 83 NaN 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r多條件篩選 若要同時滿足多個條件，必須用 \u0026amp; 搭配括號來包住每個條件，否則容易出錯。以下例子會篩選出「Class A」中自然成績大於 80 的學生：\nPYTHON\rCollapse\rCopy\r# 同時滿足多個條件（使用 \u0026amp; 和括號） print(\u0026#34;\\nClass A and Science \u0026gt; 80:\\n\u0026#34;, df[(df[\u0026#34;Class\u0026#34;] == \u0026#34;Class A\u0026#34;) \u0026amp; (df[\u0026#34;Science\u0026#34;] \u0026gt; 80)]) \u0026#34;\u0026#34;\u0026#34; Class A and Science \u0026gt; 80: Name Class Math English Science 0 Alice Class A 90 88 85.0 3 Diana Class A 92 85 90.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r篩選多個值(使用 isin()) 如果需要篩選出欄位值為多個可能的情況（像是 Class A 和 Class B），就可以使用 isin() 函數，它會回傳布林 Series，判斷哪些列的值存在於指定的列表中。\nPYTHON\rCollapse\rCopy\r# 篩選多個值(使用 isin()) print(\u0026#34;\\nClass A and B:\\n\u0026#34;, df_e[df_e[\u0026#34;Class\u0026#34;].isin([\u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;])]) \u0026#34;\u0026#34;\u0026#34; Class A and B: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 6 George Class A 84 83 NaN 7 Hannah Class B 91 86 80.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r名字有包含li，模糊搜尋 若想針對文字欄位進行部分比對（像是名字中含有「li」），可以搭配 str.contains() 使用，它會針對每個字串進行關鍵字搜尋。\nPYTHON\rCollapse\rCopy\r# 名字有包含li，模糊搜尋 print(\u0026#34;\\nName contains \u0026#39;li\u0026#39;:\\n\u0026#34;, df_e[df_e[\u0026#34;Name\u0026#34;].str.contains(\u0026#34;li\u0026#34;)]) \u0026#34;\u0026#34;\u0026#34; Name contains \u0026#39;li\u0026#39;: Name Class Math English Science 0 Alice Class A 90 88 85.0 2 Charlie Class C 78 80 NaN 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r缺失值 在進行資料分析時，經常會遇到資料缺失的情況，例如感應器故障、問卷未填寫、資料紀錄中斷等。這些缺失值如果沒有妥善處理，可能會影響整體統計結果與模型表現。因此，理解如何檢查、篩選、刪除與填補缺失值，是資料處理中的重要步驟。\n檢查缺失值 第一步是檢查資料中哪些欄位或列包含缺失值。在 Pandas 中，可以使用 isnull() 搭配 sum() 快速掌握缺失狀況。\n先列出原始資料。\nPYTHON\rCollapse\rCopy\rdata_expand = { \u0026#34;Name\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;Diana\u0026#34;, \u0026#34;Ethan\u0026#34;, \u0026#34;Fiona\u0026#34;, \u0026#34;George\u0026#34;, \u0026#34;Hannah\u0026#34;, \u0026#34;Ian\u0026#34;, \u0026#34;Julia\u0026#34;], \u0026#34;Class\u0026#34;: [\u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;, \u0026#34;Class B\u0026#34;, \u0026#34;Class C\u0026#34;, \u0026#34;Class A\u0026#34;], \u0026#34;Math\u0026#34;: [90, 85, 78, 92, 88, 79, 84, 91, 76, 89], \u0026#34;English\u0026#34;: [88, 92, 80, 85, 90, 77, 83, 86, 81, 87], \u0026#34;Science\u0026#34;: [85, 79, None, 90, 84, 82, None, 80, 78, 89] } df = pd.DataFrame(data_expand) print(\u0026#34;\\nAll expand data:\\n\u0026#34;, df) \u0026#34;\u0026#34;\u0026#34; All expand data: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 79 77 82.0 6 George Class A 84 83 NaN 7 Hannah Class B 91 86 80.0 8 Ian Class C 76 81 78.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r使用 isnull() ，會返回布林值。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nCheck if each value is null:\\n\u0026#34;, df.isnull()) # 顯示每個欄位是否為缺失值（True/False） \u0026#34;\u0026#34;\u0026#34; Check if each value is null: Name Class Math English Science 0 False False False False False 1 False False False False False 2 False False False False True 3 False False False False False 4 False False False False False 5 False False False False False 6 False False False False True 7 False False False False False 8 False False False False False 9 False False False False False \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r使用 isnull() 和 sum() ，確認資料缺失狀況。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nCount of null values in each column:\\n\u0026#34;,df.isnull().sum()) # 計算每個欄位中缺失值的數量 \u0026#34;\u0026#34;\u0026#34; Count of null values in each column: Name 0 Class 0 Math 0 English 0 Science 2 dtype: int64 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r篩選缺失值 當需要進一步了解缺失值的分布或針對有缺失的資料進行觀察時，我們可以使用布林條件來篩選。例如，可以找出某欄位為空的列，或是任何欄位有缺失值的列。這個步驟常用來觀察資料是否有集中缺失、或僅是零星缺漏。\n使用條件篩選，找出特定欄位中為缺失值的資料。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nRows where Science is null\\n\u0026#34;, df[df[\u0026#34;Science\u0026#34;].isnull()]) # 找出 Science 欄位為缺失值的列 \u0026#34;\u0026#34;\u0026#34; Rows where Science is null Name Class Math English Science 2 Charlie Class C 78 80 NaN 6 George Class A 84 83 NaN \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r篩選出任何一個欄位有缺失值的資料列。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nRows with any null value:\\n\u0026#34;, df[df.isnull().any(axis=1)]) # 找出任何欄位為缺失值的列 \u0026#34;\u0026#34;\u0026#34; Rows with any null value: Name Class Math English Science 2 Charlie Class C 78 80 NaN 6 George Class A 84 83 NaN \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r刪除缺失值 若缺失資料過於零散，或該欄位對分析影響不大，可以選擇直接刪除含有缺失值的列。這是最簡單的處理方式，但也會導致資料量減少，需評估是否會影響分析結果的代表性。\n當資料的缺失值無法合理補足時，可以考慮直接刪除，常見於少數缺失且樣本量足夠的情況。這行程式碼會刪除所有包含缺失值的列，但不會改變原始資料（除非加上 inplace=True）。刪除後的資料會較乾淨，適合進行統計分析，但也可能會損失部分資訊。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nDrop rows with any missing values:\\n\u0026#34;, df.dropna()) # 刪除任何缺失值的列 # df.dropna(inplace=True) # 直接修改原本的 df \u0026#34;\u0026#34;\u0026#34; Drop rows with any missing values: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 79 77 82.0 7 Hannah Class B 91 86 80.0 8 Ian Class C 76 81 78.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r填補缺失值 若刪除資料會導致樣本不足，則可考慮以「補值」方式處理。補值策略應根據資料的特性與分析目的選擇，常見方式包括：\n補 0 補平均值 向前填補（ffill）或向後填補（bfill） 補 0 適用於像是成績、銷售等情境，缺席可視為「沒有表現」。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nFill missing values with 0:\\n\u0026#34;, df.fillna(0)) \u0026#34;\u0026#34;\u0026#34; Fill missing values with 0: Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 0.0 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 79 77 82.0 6 George Class A 84 83 0.0 7 Hannah Class B 91 86 80.0 8 Ian Class C 76 81 78.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r補平均值 適合資料波動不大的情況，如氣溫、濕度等連續型資料。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nFill missing values in \u0026#39;Science\u0026#39; with the mean:\\n\u0026#34;, df.fillna({\u0026#34;Science\u0026#34;: df[\u0026#34;Science\u0026#34;].mean()})) \u0026#34;\u0026#34;\u0026#34; Fill missing values in \u0026#39;Science\u0026#39; with the mean: Name Class Math English Science 0 Alice Class A 90 88 85.000 1 Bob Class B 85 92 79.000 2 Charlie Class C 78 80 83.375 3 Diana Class A 92 85 90.000 4 Ethan Class B 88 90 84.000 5 Fiona Class C 79 77 82.000 6 George Class A 84 83 83.375 7 Hannah Class B 91 86 80.000 8 Ian Class C 76 81 78.000 9 Julia Class A 89 87 89.000 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r向前填補（ffill）或向後填補（bfill） 特別適合時間序列資料，像是感測器每分鐘紀錄一次的數據中，短時間內缺失可以用前後的資料推估補上。\nPYTHON\rCollapse\rCopy\rprint(\u0026#34;\\nFill missing values using forward fill (ffill):\\n\u0026#34;, df.ffill()) \u0026#34;\u0026#34;\u0026#34; Fill missing values in \u0026#39;Science\u0026#39; with the mean: Name Class Math English Science 0 Alice Class A 90 88 85.000 1 Bob Class B 85 92 79.000 2 Charlie Class C 78 80 83.375 3 Diana Class A 92 85 90.000 4 Ethan Class B 88 90 84.000 5 Fiona Class C 79 77 82.000 6 George Class A 84 83 83.375 7 Hannah Class B 91 86 80.000 8 Ian Class C 76 81 78.000 9 Julia Class A 89 87 89.000 \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;\\nFill missing values using backward fill (bfill):\\n\u0026#34;, df.bfill()) \u0026#34;\u0026#34;\u0026#34; Fill missing values using forward fill (ffill): Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 79.0 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 79 77 82.0 6 George Class A 84 83 82.0 7 Hannah Class B 91 86 80.0 8 Ian Class C 76 81 78.0 9 Julia Class A 89 87 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r讀取檔案 在實際處理資料時，我們通常會從外部檔案讀取資料，例如 .csv 或 .json。Pandas 提供了多種方便的函式來幫助我們讀取這些常見格式。\n以下介紹兩種常用的讀取方式：\npd.read_csv()：用來讀取 CSV 檔案，是最常見的資料格式之一。 pd.read_json()：用來讀取 JSON 格式的資料，也非常常見於 API 回傳的資料內容。 讀取後會得到一個 DataFrame，我們可以用 df.head() 來查看前幾筆資料內容，確認格式是否正確。\n下面是實際讀入 CSV 的範例。\nPYTHON\rCollapse\rCopy\rimport pandas as pd df = pd.read_csv(\u0026#34;./pandas_practice/data.csv\u0026#34;) # 檔名可以是相對路徑或絕對路徑 print(df) \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 95 89 91.0 6 George Class A 70 75 72.0 7 Hannah Class B 83 87 85.0 8 Ian Class C 60 65 62.0 9 Julia Class A 88 90 89.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\rdf.head() 預設是載入5筆資料，也可以依據需求來顯示不同數量的資料。\nPYTHON\rCollapse\rCopy\rprint(df.head()) # 顯示前 5 筆資料 # print(df.head(3)) # 顯示前 3 筆資料 \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r下面是實際讀入 JSON 的範例。\nPYTHON\rCollapse\rCopy\rdf = pd.read_json(\u0026#34;./pandas_practice/data.json\u0026#34;) print(df) \u0026#34;\u0026#34;\u0026#34; Name Class Math English Science 0 Alice Class A 90 88 85.0 1 Bob Class B 85 92 79.0 2 Charlie Class C 78 80 NaN 3 Diana Class A 92 85 90.0 4 Ethan Class B 88 90 84.0 5 Fiona Class C 91 89 88.0 6 George Class A 76 81 70.0 7 Hannah Class C 83 87 82.0 8 Ian Class B 89 86 85.0 9 Julia Class A 80 79 76.0 \u0026#34;\u0026#34;\u0026#34;\rClick to expand and view more\r","title":"Pandas 練習紀錄"},{"link":"/posts/numpy-%E7%B7%B4%E7%BF%92%E7%B4%80%E9%8C%84/","text":"Numpy 練習紀錄 基本運算 可以用 numpy 來進行一些基本運算，NumPy 的陣列運算是「元素對元素」的操作（element-wise），包含加減乘除、根號、次方等等。\nPYTHON\rCollapse\rCopy\rimport numpy as np # 基本運算 import numpy as np a = np.array([1, 4, 9]) b = np.array([4, 5, 6]) print(\u0026#34;\\n numpy array a=\u0026#34;, a) print(\u0026#34;\\n numpy array b=\u0026#34;, b) print(\u0026#34;\\n加法\\na+b=\u0026#34;, a+b) print(\u0026#34;\\n減法\\na-b=\u0026#34;, a-b) print(\u0026#34;\\n乘法\\na*b=\u0026#34;, a*b) print(\u0026#34;\\n除法\\na/b=\u0026#34;, a/b) print(\u0026#34;\\n根號\\na=\u0026#34;, np.sqrt(a)) print(\u0026#34;\\n倍數\\nb*2=\u0026#34;, b*2) print(\u0026#34;\\n次方\\nb**2=\u0026#34;, b**2)\rClick to expand and view more\rnumpy array 和 list 的差別，numpy如果乘2，會把各個元素逐一乘2；list如果乘2，會將整個list複製一份。\nPYTHON\rCollapse\rCopy\rimport numpy as np # 和 list 比較 print(\u0026#34;\\n\u0026#34;+\u0026#34;---\u0026#34;*30) lista = [1, 2, 3] print(\u0026#34;lista = \u0026#34;, lista) # lista = [1, 2, 3] print(\u0026#34;lista*2 = \u0026#34;, lista*2) # lista*2 = [1, 2, 3, 1, 2, 3]\rClick to expand and view more\r廣播(Broadcasting) 在 NumPy 中，大多數的運算都是「逐元素運算」（element-wise operation）。\n如果想將一個較小的陣列與較大的陣列一起運算，就可以用到 Broadcasting（廣播機制）。\n像是 +10 這樣的加法，會直接將每個元素都加上 10；而如果是乘上一個陣列的話，就要注意兩個陣列的形狀是否相容，才能正確進行廣播運算。\nPYTHON\rCollapse\rCopy\rimport numpy as np broadcast_arr = np.arange(1,7).reshape(2,3) print(broadcast_arr) print(\u0026#34;\\n加一個數字 10\u0026#34;) print(broadcast_arr+10) print(\u0026#34;\\n乘一個陣列(new_arr) [1, 2, 3]\u0026#34;) new_arr = np.array([1, 2, 3]) print(\u0026#34;# broadcast_arr.shape = \u0026#34;, broadcast_arr.shape) print(\u0026#34;# new_arr.shape = \u0026#34;, new_arr.shape) print(broadcast_arr*new_arr)\rClick to expand and view more\rdot 與 matmul 基礎 在 NumPy 中，如果要進行矩陣乘法（也就是線性代數裡的「內積」），有幾種方式可以使用：np.dot()、np.matmul()，還有比較 Python 的 @ 運算子。\n這三種方式在處理 2 維陣列時基本上是等效的：\nPYTHON\rCollapse\rCopy\rimport numpy as np a = np.array([[1, 2] ,[3, 4]]) b = np.array([[4, 3] ,[2, 1]]) print(\u0026#34;\\n np.dot(a, b): \\n\u0026#34;, np.dot(a, b)) print(\u0026#34;\\n np.matmul(a, b): \\n\u0026#34;, np.matmul(a, b)) print(\u0026#34;\\n @ 運算子 \\n\u0026#34;, a@b)\rClick to expand and view more\r在這裡：\nnp.dot() 是早期常見的用法，不只可以用在矩陣乘法，也可以做向量內積。 np.matmul() 是為了明確表示「矩陣乘法」而設計的方法。 @ 是 Python 3.5 之後新增的運算子，寫起來最簡潔，也最符合數學上的寫法。 備註：這裡只針對 2D 陣列的情境做說明，更高維度的運算結果可能會有所不同。\n總和、平均、標準差 基礎操作 在 NumPy 中，可以很方便地對陣列進行統計運算，例如總和（sum）、平均（mean）和標準差（std）。這些方法都可以搭配 axis 參數來指定要在「哪個維度」進行運算。\nPYTHON\rCollapse\rCopy\rimport numpy as np # 建立一個 2D 陣列 arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(\u0026#34;原始資料：\u0026#34;) print(arr) # 計算總和 print(\u0026#34;\\n總和 (sum)：\u0026#34;) print(np.sum(arr)) # 所有元素的總和 print(np.sum(arr, axis=0)) # 每列的總和 print(np.sum(arr, axis=1)) # 每欄的總和 # 計算平均數 print(\u0026#34;\\n平均數 (mean)：\u0026#34;) print(np.mean(arr)) # 所有元素的平均 print(np.mean(arr, axis=0)) # 每列的平均 print(np.mean(arr, axis=1)) # 每欄的平均 # 計算標準差 print(\u0026#34;\\n標準差 (std)：\u0026#34;) print(np.std(arr)) # 所有元素的標準差 print(np.std(arr, axis=0)) # 每列的標準差 print(np.std(arr, axis=1)) # 每欄的標準差\rClick to expand and view more\r實戰統計分析練習 模擬一筆資料並進行統計分析(mean, std, var, max, argmax)。\n其中 argmax 是一個很實用的函式，它會回傳最大值「第一次出現」的索引位置。\nPYTHON\rCollapse\rCopy\r# 模擬一筆資料（可以是某種測量數據、分數等等） data = np.array([5, 12, 7, 9, 15, 3, 8]) # 基本統計指標 print(\u0026#34;Data:\u0026#34;, data) print(\u0026#34;Mean (平均):\u0026#34;, np.mean(data)) print(\u0026#34;Standard Deviation (標準差):\u0026#34;, np.std(data)) print(\u0026#34;Variance (變異數):\u0026#34;, np.var(data)) print(\u0026#34;Max (最大值):\u0026#34;, np.max(data)) print(\u0026#34;Argmax (最大值的索引):\u0026#34;, np.argmax(data))\rClick to expand and view more\r隨機資料的統計分析（延伸應用） 可以用 Numpy 生成一些隨機資料，，並進行簡單的統計分析。\n這邊是一個簡單的畫圖程式。\nPYTHON\rCollapse\rCopy\rimport numpy as np import matplotlib.pyplot as plt # 繪圖函式 def show_visual(data, title): plt.hist(data, bins=30, edgecolor=\u0026#39;black\u0026#39;) plt.title(title) plt.xlabel(\u0026#34;Value\u0026#34;) plt.ylabel(\u0026#34;Frequency\u0026#34;) plt.show()\rClick to expand and view more\r可以先看看常見的兩種分布，分別是常態分佈、均勻分布。\nPYTHON\rCollapse\rCopy\r# 生成1000個服從常態分布的數據，均值為0，標準差為1 normal_data = np.random.normal(loc=0, scale=1, size=1000) # 查看生成的數據的簡單統計 print(\u0026#34;常態分布數據的平均值:\u0026#34;, np.mean(normal_data)) print(\u0026#34;常態分布數據的標準差:\u0026#34;, np.std(normal_data)) show_visual(normal_data, \u0026#34;Normal Distribution\u0026#34;) # 生成1000個服從均勻分布的數據，範圍是[0, 10] uniform_data = np.random.uniform(low=0, high=10, size=1000) # 查看生成的數據的簡單統計 print(\u0026#34;\\n均勻分布數據的平均值:\u0026#34;, np.mean(uniform_data)) print(\u0026#34;均勻分布數據的標準差:\u0026#34;, np.std(uniform_data)) show_visual(uniform_data, \u0026#34;Uniform Distribution\u0026#34;)\rClick to expand and view more\r骰子模擬：觀察隨機分布 這個練習的目標是模擬擲骰子的情境，並透過簡單的統計與視覺化，觀察點數的分布狀況。\n練習目標\n使用 np.random.randint(1, 7, size=5000) 模擬 5000 次擲骰子。 計算每個點數出現的次數。 使用 plt.bar() 或 plt.hist() 將結果視覺化。 PYTHON\rCollapse\rCopy\rimport numpy as np import matplotlib.pyplot as plt # 定義骰子 def dice_roll(dice_num, size): dice = np.random.randint(1, 7, size=size) values, counts = np.unique(dice, return_counts=True) print(f\u0026#34;{dice_num}\u0026#34;) for val, count in zip(values, counts): print(f\u0026#34;點數 {val} 出現了 {count} 次\u0026#34;) return dice # 分別擲骰子 dice_1 = dice_roll(\u0026#34;dice_1\u0026#34;, 5000) dice_2 = dice_roll(\u0026#34;dice_2\u0026#34;, 5000) # 總和相加並統計次數 print(\u0026#34;---\u0026#34;*30) print(\u0026#34;骰子點數相加\u0026#34;) values, counts = np.unique(dice_1+dice_2, return_counts=True) for val, count in zip(values, counts): print(f\u0026#34;相加點數 {val} 出現了 {count} 次\u0026#34;) # 原始圖表 # plt.bar(values, counts) # plt.xticks(np.arange(values.min(), values.max()+1)) # 顯示 2~12 的點 # plt.xlabel(\u0026#34;點數\u0026#34;) # plt.ylabel(\u0026#34;次數\u0026#34;) # plt.title(\u0026#34;骰子點數分布\u0026#34;) # plt.show() # 美化圖表(English version) plt.bar(values, counts, color=\u0026#39;skyblue\u0026#39;, edgecolor=\u0026#39;black\u0026#39;) plt.xlabel(\u0026#34;Sum of Dice\u0026#34;) plt.ylabel(\u0026#34;Frequency\u0026#34;) plt.title(\u0026#34;Distribution of the Sum of Two Dice\u0026#34;) plt.grid(axis=\u0026#39;y\u0026#39;, linestyle=\u0026#39;--\u0026#39;, alpha=0.7) plt.tight_layout() plt.show()\rClick to expand and view more\r如果擲骰子的次數較少，點數的分布會有比較分散、不穩定的明顯偏差；隨著投擲次數的增加，分布會逐漸趨近理論上的平均，也就是類似鐘形曲線的樣子。\n成績分布模擬 這個練習的目標是模擬學生成績分布，並觀察成績的分布情況。\n練習目標\n使用宣告的方式輸入20個隨機生成的學生成績。 使用 matplotlib 繪製學生成績的直方圖。 PYTHON\rCollapse\rCopy\rimport numpy as np import matplotlib.pyplot as plt import matplotlib.ticker as ticker # 宣告學生姓名與成績 students_scores = { \u0026#34;Alice\u0026#34;: 88, \u0026#34;Ben\u0026#34;: 92, \u0026#34;Cathy\u0026#34;: 79, \u0026#34;David\u0026#34;: 85, \u0026#34;Ella\u0026#34;: 95, \u0026#34;Frank\u0026#34;: 68, \u0026#34;Grace\u0026#34;: 74, \u0026#34;Henry\u0026#34;: 91, \u0026#34;Ivy\u0026#34;: 84, \u0026#34;Jack\u0026#34;: 77, \u0026#34;Kathy\u0026#34;: 81, \u0026#34;Leo\u0026#34;: 90, \u0026#34;Mia\u0026#34;: 31, \u0026#34;Nina\u0026#34;: 85, \u0026#34;Oscar\u0026#34;: 89, \u0026#34;Paul\u0026#34;: 78, \u0026#34;Queen\u0026#34;: 88, \u0026#34;Ryan\u0026#34;: 95, \u0026#34;Sara\u0026#34;: 32, \u0026#34;Tom\u0026#34;: 28 } # 抽取成績列表做統計 scores = list(students_scores.values()) print(\u0026#34;All scores:\u0026#34;, scores) # 計算統計數據 mean_score = np.mean(scores) std_score = np.std(scores) min_score = np.min(scores) max_score = np.max(scores) # 輸出統計信息 print(f\u0026#34;mean_score: {mean_score:.2f}\u0026#34;) print(f\u0026#34;std_score: {std_score:.2f}\u0026#34;) print(f\u0026#34;min_score: {min_score}\u0026#34;) print(f\u0026#34;max_score: {max_score}\u0026#34;) # 繪製成績分布圖(直方圖) def bar_visualize(bins, color, edgecolor, title): \u0026#34;\u0026#34;\u0026#34; 繪製學生成績的直方圖，並將圖表儲存為 PNG 圖片。 參數: - bins (int 或 array-like): 直方圖的區間數或邊界。 - color (str): 直方圖柱子的顏色。 - edgecolor (str): 柱子邊框的顏色。 - title (str): 圖表標題，也會用來命名輸出的圖片檔案。 \u0026#34;\u0026#34;\u0026#34; plt.hist(scores, bins=bins, color=color, edgecolor=edgecolor) plt.xlabel(\u0026#34;Score\u0026#34;) plt.ylabel(\u0026#34;Number of Students\u0026#34;) plt.title(title) plt.grid(axis=\u0026#39;y\u0026#39;, linestyle=\u0026#39;--\u0026#39;, alpha=0.7) plt.gca().yaxis.set_major_locator(ticker.MaxNLocator(integer=True)) plt.tight_layout() plt.savefig(f\u0026#34;{title}.png\u0026#34;) plt.show() bar_visualize(bins = 10, color = \u0026#39;pink\u0026#39;, edgecolor = \u0026#39;black\u0026#39;, title = \u0026#34;Distribution of Student Scores v1\u0026#34;) bar_visualize(bins = np.arange(0, 101, 5), color = \u0026#39;skyblue\u0026#39;, edgecolor = \u0026#39;black\u0026#39;, title = \u0026#34;Distribution of Student Scores v2\u0026#34;)\rClick to expand and view more\r如果 Y 軸沒有特別設定的話，在 Y 軸上面有可能會出現顯示成浮點數的情況，但這邊的 Y 軸是學生人數，有浮點數很奇怪。\n不想要顯示浮點數的話，可以加上 ticker，讓他強制使用整數。\nPLAINTEXT\rCollapse\rCopy\rimport matplotlib.ticker as ticker\rdef bar_visualize(bins, color, edgecolor, title):\r\u0026#34;\u0026#34;\u0026#34;\rpass\r\u0026#34;\u0026#34;\u0026#34;\rplt.gca().yaxis.set_major_locator(ticker.MaxNLocator(integer=True))\rClick to expand and view more\r以下是完整的繪圖程式。\nPYTHON\rCollapse\rCopy\r# 完整的繪圖程式碼 import numpy as np import matplotlib.pyplot as plt import matplotlib.ticker as ticker # 新增的部分 def bar_visualize(bins, color, edgecolor, title): plt.hist(scores, bins=bins, color=color, edgecolor=edgecolor) plt.xlabel(\u0026#34;Score\u0026#34;) plt.ylabel(\u0026#34;Number of Students\u0026#34;) plt.title(title) plt.grid(axis=\u0026#39;y\u0026#39;, linestyle=\u0026#39;--\u0026#39;, alpha=0.7) plt.gca().yaxis.set_major_locator(ticker.MaxNLocator(integer=True)) # 新增的部分 plt.tight_layout() plt.savefig(f\u0026#34;{title}.png\u0026#34;) plt.show() bar_visualize(bins = 10, color = \u0026#39;grey\u0026#39;, edgecolor = \u0026#39;black\u0026#39;, title = \u0026#34;Distribution of Student Scores v0\u0026#34;)\rClick to expand and view more\r更新後的圖片， Y 軸就不會有浮點數了。\n另外需要特別注意圖表的部分，如果 bin 沒有特別指定，他會依據數值的區間來自動化分，所以對齊的時候看起來會不太整齊。\nPYTHON\rCollapse\rCopy\rbar_visualize(bins = 10, color = \u0026#39;pink\u0026#39;, edgecolor = \u0026#39;black\u0026#39;, title = \u0026#34;Distribution of Student Scores v1\u0026#34;)\rClick to expand and view more\r為了解決這個狀況，可以手動指定 bin 的區間，讓他強制對齊，例如指定從 0 ~ 101，以5為間隔進行對齊。\nPYTHON\rCollapse\rCopy\rbar_visualize(bins = np.arange(0, 101, 5), color = \u0026#39;skyblue\u0026#39;, edgecolor = \u0026#39;black\u0026#39;, title = \u0026#34;Distribution of Student Scores v2\u0026#34;)\rClick to expand and view more\r","title":"Numpy 練習紀錄"}],"tags":[{"link":"/tags/%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95/","name":"基本語法","slug":"基本語法"},{"link":"/tags/%E5%B7%A5%E5%85%B7/","name":"工具","slug":"工具"},{"link":"/tags/%E8%B3%87%E6%96%99%E6%95%B4%E7%90%86/","name":"資料整理","slug":"資料整理"}]}