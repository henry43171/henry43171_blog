<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on Henry Automates</title>
    <link>https://henry43171.github.io/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on Henry Automates</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 07 Oct 2025 15:30:00 +0800</lastBuildDate>
    <atom:link href="https://henry43171.github.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Stress Test Demo - API壓力測試測試工具</title>
      <link>https://henry43171.github.io/posts/project_api_stress_test_demo/</link>
      <pubDate>Tue, 07 Oct 2025 15:30:00 +0800</pubDate>
      <guid>https://henry43171.github.io/posts/project_api_stress_test_demo/</guid>
      <description>&lt;h2 id=&#34;api-stress-test-demo---api壓力測試測試工具&#34;&gt;API Stress Test Demo - API壓力測試測試工具&lt;/h2&gt;&#xA;&lt;h2 id=&#34;背景與動機&#34;&gt;背景與動機&lt;/h2&gt;&#xA;&lt;p&gt;在開發與維運 API 時，我們經常需要測試其在高併發或長時間運行下的穩定性。本專案提供一個簡單易用的工具，降低人工測試成本，快速回饋系統性能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;API_flow.png&#34; alt=&#34;API流程圖&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;工具組成與特色&#34;&gt;工具組成與特色&lt;/h2&gt;&#xA;&lt;h3 id=&#34;核心測試模組&#34;&gt;核心測試模組&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支援高併發模擬與長時間測試。&lt;/li&gt;&#xA;&lt;li&gt;參數化設計，可調整使用者數量、測試時間、單位時間等。&lt;/li&gt;&#xA;&lt;li&gt;模組化程式架構，方便擴展不同 API 測試腳本。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;hc_flow.png&#34; alt=&#34;高併發模擬測試流程&#34;&gt;&lt;br&gt;&#xA;&lt;img src=&#34;ld_flow.png&#34; alt=&#34;長時間模擬測試流程&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;api-設計&#34;&gt;API 設計&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;採用模組化結構，每個 API 測試腳本以獨立函式存在，可由主控制模組動態呼叫。&lt;/li&gt;&#xA;&lt;li&gt;測試函式支援以 lambda 傳入參數，靈活組合不同場景，例如：&lt;br&gt;&#xA;(&amp;lsquo;submit_form&amp;rsquo;, lambda: submit_form({**data, &amp;lsquo;current_users&amp;rsquo;: total_users}))&lt;/li&gt;&#xA;&lt;li&gt;以統一接口格式傳遞請求與結果，避免各 API 間的結構不一致。&lt;/li&gt;&#xA;&lt;li&gt;流程設計包含：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;進入網頁（GET）&lt;/li&gt;&#xA;&lt;li&gt;取得表單資料（GET）&lt;/li&gt;&#xA;&lt;li&gt;提交表單（POST）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;支援基本的負載模擬，可依參數設定人數上限，模擬真實環境的請求行為。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;API_flow.png&#34; alt=&#34;API流程示意圖&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;補log-管理&#34;&gt;【補】Log 管理&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以 logging 模組集中管理所有測試日誌。&lt;/li&gt;&#xA;&lt;li&gt;採用雙層 Log 機制：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Console log：即時顯示測試進度與警示。&lt;/li&gt;&#xA;&lt;li&gt;File log：完整記錄測試細節與結果。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Log 格式包含時間戳記、API 名稱、狀態與延遲時間，方便日後比對。&lt;/li&gt;&#xA;&lt;li&gt;自動生成每日 log 檔案，命名格式如：&lt;br&gt;&#xA;logs/2025-10-07_api_stress.log&lt;/li&gt;&#xA;&lt;li&gt;並區分不同測試模式（高併發 / 長時間），各自擁有獨立資料夾與流水號，方便版本追蹤。&lt;/li&gt;&#xA;&lt;li&gt;若測試異常中斷，仍可根據 log 恢復測試結果統計。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;log_sample.png&#34; alt=&#34;【補】Log紀錄範例圖&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;高併發與長時間設計&#34;&gt;高併發與長時間設計&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 ThreadPoolExecutor 實現高併發控制，確保效能與穩定性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auto Test Demo - 自動化測試工具</title>
      <link>https://henry43171.github.io/posts/project_auto_test_demo/</link>
      <pubDate>Tue, 02 Sep 2025 12:00:00 +0800</pubDate>
      <guid>https://henry43171.github.io/posts/project_auto_test_demo/</guid>
      <description>&lt;h2 id=&#34;auto-test-demo---自動化測試工具&#34;&gt;Auto Test Demo - 自動化測試工具&lt;/h2&gt;&#xA;&lt;h3 id=&#34;背景與動機&#34;&gt;背景與動機&lt;/h3&gt;&#xA;&lt;p&gt;在過去的專案中，我經常需要手動測試後台系統功能，這不僅耗時，也容易因人為操作而出現錯誤。為了提高測試效率並建立可重複使用的流程，我設計了 &lt;strong&gt;Auto Test Demo&lt;/strong&gt;，一個結合 &lt;strong&gt;DEMO 網頁&lt;/strong&gt; 與 &lt;strong&gt;自動化測試工具&lt;/strong&gt; 的完整方案。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;DEMO 網頁&lt;/strong&gt;模擬後台系統與報表展示，資料皆為假資料，僅用於展示自動化工具使用；&lt;strong&gt;自動化測試工具&lt;/strong&gt;提供 GUI 介面來執行 Selenium 測試案例，並生成 HTML 測試報告。透過這個整合方案，我可以快速驗證系統功能、展示報表互動，並降低手動測試成本。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;all_demo.png&#34; alt=&#34;工具整體展示畫面&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;工具組成與特色&#34;&gt;工具組成與特色&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-demo-網頁&#34;&gt;1. DEMO 網頁&lt;/h4&gt;&#xA;&lt;p&gt;提供完整的後台管理介面，涵蓋首頁、用戶管理、報表與設定頁面，模擬真實後台操作情境。&#xA;&lt;img src=&#34;demo_web.png&#34; alt=&#34;網頁畫面&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要特色&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模擬多筆假資料，呈現真實使用情境，便於展示自動化測試效果。&#xA;&lt;img src=&#34;demo_all_web.gif&#34; alt=&#34;網站整體gif&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;報表頁面支援互動式圖表（折線圖 + 柱狀圖），清楚呈現每日銷售額與轉換率，使資料呈現更貼近實際使用情境。&#xA;&lt;img src=&#34;demo_web_report.gif&#34; alt=&#34;網站報表gif&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;簡單直觀的頁面操作，操作過程可直接展示和驗證功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-自動化測試工具&#34;&gt;2. 自動化測試工具&lt;/h4&gt;&#xA;&lt;p&gt;基於 Python 與 Selenium 的 GUI 工具，提供模組化測試方案，能自動執行測試並生成 HTML 報告。&#xA;&lt;img src=&#34;automationtool_gui.gif&#34; alt=&#34;自動化工具GUI畫面gif&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要特色&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GUI 可選擇測試模組與執行環境，操作簡單直覺。&lt;/li&gt;&#xA;&lt;li&gt;自動執行後生成可讀性高的 HTML 報告，顯示頁面資料是否正常呈現。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;模組化設計&lt;/strong&gt;：新增測試模組不會影響原有功能，方便維護與擴充。&lt;/li&gt;&#xA;&lt;li&gt;可與 DEMO 網頁互動，驗證報表與圖表功能是否正確呈現。&lt;/li&gt;&#xA;&lt;li&gt;適應職場快速迭代環境（兩週一次），手動 GUI 執行比完全自動化 CI/CD 更靈活。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;使用方式使用者面向&#34;&gt;使用方式（使用者面向）&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;開啟 GUI 工具，選擇欲執行的測試模組。&#xA;&lt;img src=&#34;automationtool_gui.png&#34; alt=&#34;自動化工具GUI畫面&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;點擊執行，程式將自動進行後台操作模擬與報表檢查。&lt;/li&gt;&#xA;&lt;li&gt;測試完成後，生成 HTML 報告供檢視測試結果。&#xA;&lt;img src=&#34;automationtool_report_demo.png&#34; alt=&#34;自動化工具報表畫面&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;亮點&lt;/strong&gt;：操作直覺，非技術使用者亦可輕鬆執行測試；可依據需求決定測試項目；支援切換不同測試環境（開發/測試/UAT）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HotkeyTray - 托盤監聽截圖工具</title>
      <link>https://henry43171.github.io/posts/hotkeytray/</link>
      <pubDate>Wed, 27 Aug 2025 03:00:00 +0800</pubDate>
      <guid>https://henry43171.github.io/posts/hotkeytray/</guid>
      <description>&lt;h2 id=&#34;hotkeytray---托盤監聽截圖工具試工具&#34;&gt;HotkeyTray - 托盤監聽截圖工具試工具&lt;/h2&gt;&#xA;&lt;h3 id=&#34;為什麼會有這個工具&#34;&gt;為什麼會有這個工具&lt;/h3&gt;&#xA;&lt;p&gt;在多螢幕環境下工作時，截圖常常是一件麻煩事。&lt;br&gt;&#xA;Windows 內建的截圖工具要不就是需要手動框選範圍，要不就是整個螢幕，&lt;br&gt;&#xA;如果我只想要「左螢幕一鍵截圖」或「右螢幕一鍵截圖」，就顯得很笨重。&lt;/p&gt;&#xA;&lt;p&gt;於是我動手寫了一個小工具 —— &lt;strong&gt;HotkeyTray&lt;/strong&gt;。&lt;br&gt;&#xA;它是一個常駐在系統托盤的 Python 程式，只要設定好快捷鍵，就能隨時一鍵截圖並自動儲存。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;hotkeytray_tray.png&#34; alt=&#34;HotkeyTray 在系統托盤中&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;工具簡介&#34;&gt;工具簡介&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;名稱：HotkeyTray&lt;/li&gt;&#xA;&lt;li&gt;功能特色：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系統托盤常駐，不佔畫面&lt;/li&gt;&#xA;&lt;li&gt;設定快捷鍵截取左螢幕、右螢幕&lt;/li&gt;&#xA;&lt;li&gt;設定檔可自訂快捷鍵、儲存路徑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;適用情境：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遠端開會快速截圖&lt;/li&gt;&#xA;&lt;li&gt;文件製作&lt;/li&gt;&#xA;&lt;li&gt;一般多螢幕日常使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;hotkeytray_settings.png&#34; alt=&#34;設定視窗畫面&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;技術堆疊&#34;&gt;技術堆疊&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;pystray&lt;/strong&gt;：系統托盤功能&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;keyboard&lt;/strong&gt;：快捷鍵偵測&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pillow&lt;/strong&gt;：影像處理&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;dotenv + JSON&lt;/strong&gt;：設定管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;安裝與使用&#34;&gt;安裝與使用&lt;/h3&gt;&#xA;&lt;h4 id=&#34;安裝&#34;&gt;安裝&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以直接下載 EXE 檔執行&lt;/li&gt;&#xA;&lt;li&gt;或者用 Python 自行執行：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/henry43171/HotkeyTray.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd HotkeyTray&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用步驟&#34;&gt;使用步驟&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;啟動程式後，系統托盤會出現 &lt;strong&gt;HotkeyTray&lt;/strong&gt; 圖示&lt;/li&gt;&#xA;&lt;li&gt;預設快捷鍵：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Alt+1&lt;/code&gt; = 左螢幕截圖&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Alt+2&lt;/code&gt; = 右螢幕截圖&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;截圖會自動存到 &lt;code&gt;screenshots/&lt;/code&gt; 資料夾&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;開發過程的小插曲&#34;&gt;開發過程的小插曲&lt;/h3&gt;&#xA;&lt;p&gt;這原本只是個簡單的小工具，但過程中還是踩了不少坑：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一開始有兩份 &lt;code&gt;load_config&lt;/code&gt;，搞到自己亂掉&lt;/li&gt;&#xA;&lt;li&gt;一度遇到「修改設定後不會馬上套用」的問題&lt;/li&gt;&#xA;&lt;li&gt;才發現，就算小專案也會遇到維護性挑戰&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;這些問題讓我開始理解「程式碼乾淨」與「可維護性」的重要性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DailyMediaTool - 每日自動發圖工具</title>
      <link>https://henry43171.github.io/posts/project_daily_discord_bot/</link>
      <pubDate>Fri, 01 Aug 2025 12:00:00 +0800</pubDate>
      <guid>https://henry43171.github.io/posts/project_daily_discord_bot/</guid>
      <description>&lt;h2 id=&#34;dailymediatool---每日自動發圖工具&#34;&gt;DailyMediaTool - 每日自動發圖工具&lt;/h2&gt;&#xA;&lt;h3 id=&#34;背景與動機&#34;&gt;背景與動機&lt;/h3&gt;&#xA;&lt;p&gt;在使用 Discord 的過程中，我加入一個人數龐大的群組，我發現管理員經常需要每天發送圖片，使得每日發圖成為繁瑣的工作。由於我並不熟悉群組內管理流程，我假設唯一的發圖者需要從自己電腦上傳圖片，因此決定開發 &lt;strong&gt;DailyMediaTool&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;這個工具可以直接讀取使用者電腦本地的圖片，透過 Windows 任務排程器，完成每日定時發圖，省去手動操作，並降低對雲端服務的依賴。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;C:\your_name\daily_media_tool\daily_bot&amp;gt;python main.py&#xA;2025-09-16 14:11:11 INFO     discord.client logging in using static token&#xA;2025-09-16 14:11:13 INFO     discord.gateway Shard ID None has connected to Gateway (Session ID: xxxxxx).&#xA;✅ 機器人已上線&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;工具組成與特色&#34;&gt;工具組成與特色&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-每日自動發圖模組&#34;&gt;1. 每日自動發圖模組&lt;/h4&gt;&#xA;&lt;p&gt;這個模組是一個簡單的 Discord 機器人，會依照資料夾中圖片的日期自動發送當天對應圖片到指定頻道，並附加自訂訊息。發送完成後，Bot 將自動關閉。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要功能&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;發送完成自動關閉，搭配排程可實現每日自動發送。&lt;/li&gt;&#xA;&lt;li&gt;啟動後等待指定秒數再發送，避免立即發送。&lt;/li&gt;&#xA;&lt;li&gt;支援 jpg、jpeg、png、webp 格式圖片。&lt;/li&gt;&#xA;&lt;li&gt;發送訊息可包含第 N 天計數與自訂文字 &lt;code&gt;{date}&lt;/code&gt; 佔位符。&lt;/li&gt;&#xA;&lt;li&gt;若找不到當日圖片，會自動發送提示訊息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;daily_media_tool_discord.png&#34; alt=&#34;每日發圖示意圖&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-圖片批量命名工具gui&#34;&gt;2. 圖片批量命名工具（GUI）&lt;/h4&gt;&#xA;&lt;p&gt;為了讓每日圖片與日期對應更加精準，我製作了 &lt;strong&gt;圖片批量命名工具&lt;/strong&gt;，提供圖形化介面操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要功能&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;選擇資料夾及自訂起始日期，依序將圖片重新命名為日期格式（YYYYMMDD）。&lt;/li&gt;&#xA;&lt;li&gt;支援單月或跨月圖片數量，自動連號編寫日期。&lt;/li&gt;&#xA;&lt;li&gt;UI 即時預覽總量與日期範圍。&lt;/li&gt;&#xA;&lt;li&gt;先暫時改名避免直接覆蓋，再依日期命名。&lt;/li&gt;&#xA;&lt;li&gt;進度條顯示改名進度。&lt;/li&gt;&#xA;&lt;li&gt;支援中文/英文切換（語系文字來源 &lt;code&gt;lang.json&lt;/code&gt;，預設語言在 &lt;code&gt;config.json&lt;/code&gt; 設定）。&lt;/li&gt;&#xA;&lt;li&gt;錯誤處理：無效日期、空資料夾等情況會有提示。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;批量命名工具中文 UI&#xA;&lt;img src=&#34;imgrenamer_gui_zh.png&#34; alt=&#34;批量命名工具中文 UI&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
